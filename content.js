// 监听来自popup的消息
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'getSubtitles') {
        getAvailableSubtitles().then(sendResponse);
        return true; // 保持消息通道开放
    }
    if (request.action === 'getVideoTitle') {
        getVideoTitle().then(sendResponse);
        return true;
    }
});

// 获取当前视频的字幕列表
async function getAvailableSubtitles() {
    try {
        console.log('开始获取字幕列表...');
        const videoId = getVideoId();
        console.log('视频ID:', videoId);

        if (!videoId) {
            console.error('未找到视频ID');
            return { error: '未找到视频ID' };
        }

        const playerResponse = await getPlayerResponse();
        console.log('播放器响应:', playerResponse);

        if (!playerResponse) {
            console.error('无法获取视频信息');
            return { error: '无法获取视频信息' };
        }

        // 检查字幕数据是否存在
        if (!playerResponse.captions?.playerCaptionsTracklistRenderer?.captionTracks) {
            console.error('字幕数据不存在:', playerResponse);
            return { error: '该视频没有可用的字幕' };
        }

        const captions = playerResponse.captions.playerCaptionsTracklistRenderer.captionTracks;
        console.log('原始字幕数据:', captions);

        const autoCaptions = captions.filter(caption => caption.kind === 'asr');
        const manualCaptions = captions.filter(caption => caption.kind !== 'asr');

        console.log('自动生成字幕:', autoCaptions);
        console.log('手动添加字幕:', manualCaptions);

        return {
            videoId,
            autoCaptions: autoCaptions.map(formatCaption),
            manualCaptions: manualCaptions.map(formatCaption)
        };
    } catch (error) {
        console.error('获取字幕列表失败:', error);
        return { error: '获取字幕列表失败: ' + error.message };
    }
}

// 格式化字幕信息
function formatCaption(caption) {
    console.log('格式化字幕信息:', caption);
    return {
        languageCode: caption.languageCode,
        languageName: caption.name?.simpleText || caption.languageCode,
        baseUrl: caption.baseUrl,
        isAutoGenerated: caption.kind === 'asr'
    };
}

// 获取视频ID
function getVideoId() {
    const urlParams = new URLSearchParams(window.location.search);
    const videoId = urlParams.get('v');
    console.log('当前URL:', window.location.href);
    console.log('解析出的视频ID:', videoId);
    return videoId;
}

// 获取播放器响应数据
function getPlayerResponse() {
    return new Promise((resolve) => {
        console.log('开始获取播放器响应数据...');

        // 方法1：尝试从播放器对象获取
        const player = document.querySelector('#movie_player');
        console.log('播放器元素:', player);

        if (player) {
            console.log('尝试从播放器对象获取数据');
            try {
                // 尝试多种可能的属性名
                const response =
                    player.getPlayerResponse?.() ||
                    player.playerResponse ||
                    player.getVideoData?.() ||
                    player.getVideoData?.().playerResponse;

                if (response) {
                    console.log('从播放器对象获取数据成功:', response);
                    resolve(response);
                    return;
                }
            } catch (e) {
                console.log('从播放器对象获取数据失败:', e);
            }
        }

        // 方法2：尝试从页面数据中提取
        console.log('尝试从页面数据中提取...');

        // 尝试查找包含字幕数据的脚本
        const scripts = Array.from(document.querySelectorAll('script')).filter(script => {
            const content = script.textContent;
            return content.includes('captionTracks') ||
                content.includes('playerCaptionsTracklistRenderer');
        });

        console.log('找到的可能包含字幕数据的脚本数量:', scripts.length);

        for (const script of scripts) {
            try {
                // 尝试提取JSON数据
                const content = script.textContent;
                const match = content.match(/"captionTracks":\s*(\[.*?\])/);
                if (match) {
                    const jsonStr = match[1];
                    const jsonData = JSON.parse(jsonStr);
                    console.log('从脚本中提取的字幕数据:', jsonData);

                    // 构建完整的响应对象
                    const response = {
                        captions: {
                            playerCaptionsTracklistRenderer: {
                                captionTracks: jsonData
                            }
                        }
                    };
                    resolve(response);
                    return;
                }
            } catch (e) {
                console.log('解析脚本数据失败:', e);
            }
        }

        // 方法3：尝试从ytInitialPlayerResponse变量获取
        console.log('尝试从ytInitialPlayerResponse变量获取...');
        if (window.ytInitialPlayerResponse) {
            console.log('找到ytInitialPlayerResponse数据');
            resolve(window.ytInitialPlayerResponse);
            return;
        }

        // 方法4：尝试从ytplayer.config变量获取
        console.log('尝试从ytplayer.config变量获取...');
        if (window.ytplayer?.config?.args?.player_response) {
            try {
                const response = JSON.parse(window.ytplayer.config.args.player_response);
                console.log('从ytplayer.config获取数据成功');
                resolve(response);
                return;
            } catch (e) {
                console.log('解析ytplayer.config数据失败:', e);
            }
        }

        // 方法5：尝试从ytplayer.bootstrapPlayerResponse获取
        console.log('尝试从ytplayer.bootstrapPlayerResponse获取...');
        if (window.ytplayer?.bootstrapPlayerResponse) {
            console.log('找到ytplayer.bootstrapPlayerResponse数据');
            resolve(window.ytplayer.bootstrapPlayerResponse);
            return;
        }

        console.log('所有方法都失败，返回null');
        resolve(null);
    });
}

// 获取视频标题
async function getVideoTitle() {
    try {
        // 方法1：从标题元素获取
        const titleElement = document.querySelector('h1.title.style-scope.ytd-video-primary-info-renderer');
        if (titleElement) {
            return { title: titleElement.textContent.trim() };
        }

        // 方法2：从播放器数据获取
        const player = document.querySelector('#movie_player');
        if (player?.getVideoData) {
            const videoData = player.getVideoData();
            if (videoData?.title) {
                return { title: videoData.title };
            }
        }

        // 方法3：从页面数据获取
        const scripts = Array.from(document.querySelectorAll('script')).filter(script => {
            const content = script.textContent;
            return content.includes('videoDetails') && content.includes('title');
        });

        for (const script of scripts) {
            try {
                const content = script.textContent;
                const match = content.match(/"title":\s*"([^"]+)"/);
                if (match) {
                    return { title: match[1] };
                }
            } catch (e) {
                console.log('解析脚本数据失败:', e);
            }
        }

        return { error: '无法获取视频标题' };
    } catch (error) {
        console.error('获取视频标题失败:', error);
        return { error: '获取视频标题失败' };
    }
}